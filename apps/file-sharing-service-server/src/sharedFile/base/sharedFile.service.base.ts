/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SharedFile as PrismaSharedFile } from "@prisma/client";

export class SharedFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SharedFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sharedFile.count(args);
  }

  async sharedFiles(
    args: Prisma.SharedFileFindManyArgs
  ): Promise<PrismaSharedFile[]> {
    return this.prisma.sharedFile.findMany(args);
  }
  async sharedFile(
    args: Prisma.SharedFileFindUniqueArgs
  ): Promise<PrismaSharedFile | null> {
    return this.prisma.sharedFile.findUnique(args);
  }
  async createSharedFile(
    args: Prisma.SharedFileCreateArgs
  ): Promise<PrismaSharedFile> {
    return this.prisma.sharedFile.create(args);
  }
  async updateSharedFile(
    args: Prisma.SharedFileUpdateArgs
  ): Promise<PrismaSharedFile> {
    return this.prisma.sharedFile.update(args);
  }
  async deleteSharedFile(
    args: Prisma.SharedFileDeleteArgs
  ): Promise<PrismaSharedFile> {
    return this.prisma.sharedFile.delete(args);
  }
}
